//
//  WebService.swift
//  WebServiceHandler1
//
//  Created by SunTelematics on 28/06/18.
//  Copyright Â© 2018 SunTelematics. All rights reserved.
//

import UIKit
import Alamofire

class WebServiceClass {
  
    //MARK:- SOAP 1.1
    func SOAP1_1WebServiceMethod(suffix : String , parameterDict : [String:String],completion:@escaping (_ Data:Any,_ IsSuccess:Bool) -> ())
    {
        
        //Part 1
        var ParamsStr = "<\(suffix) xmlns= 'http://tempuri.org/' >"
        for (key,value) in parameterDict {
            ParamsStr.append("<\(key)>\(value)</\(key)>")
        }
        ParamsStr.append("</\(suffix)>")
        print("ParamsStr = \(ParamsStr)")
        
        // need to replace double quotes  of XML text that exist in webportal with single quotes
        let fullXMLMessage = "<?xml version='1.0' encoding='utf-8'?> <soap:Envelope xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/'><soap:Body> \(ParamsStr) </soap:Body></soap:Envelope>"
        
        print("ParamsStr = \(ParamsStr)")
        print("Full XML Msg = ",fullXMLMessage)
        let soapLenth = String(fullXMLMessage.count)
        
        
        //Part 2
        let theUrlString = UrlStruct.test
        let theURL = URL(string: theUrlString)
        
        
        //Part 3
        var mutableR = URLRequest.init(url: theURL!)
        mutableR.httpMethod = "POST"
        mutableR.allHTTPHeaderFields = ["Content-Type":"text/xml; charset=utf-8","Content-Length":soapLenth,"SOAPAction":"http://tempuri.org/\(suffix)"]
        mutableR.httpBody = fullXMLMessage.data(using: String.Encoding.utf8)
        
        //Part 4
        if !(Alamofire.NetworkReachabilityManager()?.isReachable)! {
            completion([:],false)
            return
        }
        
        mutableR.timeoutInterval = 35
        mutableR.allowsCellularAccess = true
        
        Alamofire.request(mutableR).responseJSON { (DataResponse) in
            
            /*
             Response came as
             
             "{\"Success\":true,\"data\":[{\"status\":\"true\",\"Response\":\"success\"}]}<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"><soap:Body><CancelRequestResponse xmlns=\"http://tempuri.org/\" /></soap:Body></soap:Envelope>"
             
             we need to format the response
             */
            
            switch DataResponse.result{
            case .success(let value):
                completion(value,true)
                break
            case .failure(let error):
                print("Error From AlamoFire - webServiceMethod - WebServiceClass :",error.localizedDescription,"\n")
                
                
                //as some string is appended with jsonresponse,ctrl comes here.we handled by following lines
                if (DataResponse.response != nil) {
                    
                    if (DataResponse.response?.statusCode)! == 200 {
                        
                        let ResponseStr = String.init(data: DataResponse.data!, encoding: .utf8)
                        let arr = ResponseStr?.components(separatedBy: "<")
                        let finStr = arr?[0]
                        
                        if let FinalData = finStr?.data(using: .utf8) {
                            if let JsonDict:[String:AnyObject] = try? JSONSerialization.jsonObject(with: FinalData, options: .allowFragments) as! [String:AnyObject] {
                                print("The output when unneccessary characters included in response : ",JsonDict)
                            }
                            else {
                                
                            }
                        }
                        else {
                            
                        }
                    }
                }
                
                completion([:],false)
                break
            }
        }
    }

   
    //MARK:- SOAP 1.2
    func SOAP1_2WebServiceMethod(suffix : String , parameterDict : [String:String],completion:@escaping (_ Data:Any,_ IsSuccess:Bool) -> ())
    {
        
        //Part 1
        var ParamsStr = "<\(suffix) xmlns= 'http://tempuri.org/' >"
        for (key,value) in parameterDict {
            ParamsStr.append("<\(key)>\(value)</\(key)>")
        }
        ParamsStr.append("</\(suffix)>")
        print("xmlMessage = \(ParamsStr)")
        
        // need to replace double quotes  of XML text that exist in webportal with single quotes
        let fullXMLMessage = "<?xml version='1.0' encoding='utf-8'?> <soap12:Envelope xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:soap12='http://www.w3.org/2003/05/soap-envelope'><soap12:Body> \(ParamsStr) </soap12:Body></soap12:Envelope>"
        

        
        print("ParamsStr = \(ParamsStr)")
        print("Full XML Msg = ",fullXMLMessage)
        let soapLenth = String(fullXMLMessage.count)
        
        
        //Part 2
        let theUrlString = UrlStruct.test
        let theURL = URL(string: theUrlString)
        
 
        
        //Part 3
        var mutableR = URLRequest.init(url: theURL!)
        mutableR.httpMethod = "POST"
        mutableR.allHTTPHeaderFields = ["Content-Type":"application/soap+xml; charset=utf-8","Content-Length":soapLenth]
        mutableR.httpBody = fullXMLMessage.data(using: String.Encoding.utf8)
        
        //Part 4
        if !(Alamofire.NetworkReachabilityManager()?.isReachable)! {
            completion([:],false)
            return
        }
        
        mutableR.timeoutInterval = 35
        mutableR.allowsCellularAccess = true
        
        Alamofire.request(mutableR).responseJSON { (DataResponse) in
            
            /*
            Response came as
             
            "{\"Success\":true,\"data\":[{\"status\":\"true\",\"Response\":\"success\"}]}<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"><soap:Body><CancelRequestResponse xmlns=\"http://tempuri.org/\" /></soap:Body></soap:Envelope>"
             
            we need to format the response
            */
            
            switch DataResponse.result{
            case .success(let value):
                completion(value,true)
                break
            case .failure(let error):
                print("Error From AlamoFire - webServiceMethod - WebServiceClass :",error.localizedDescription,"\n")
                
                
                //as some string is appended with jsonresponse,ctrl comes here.we handled by following lines
                if (DataResponse.response != nil) {
                    
                    if (DataResponse.response?.statusCode)! == 200 {
                        
                        let ResponseStr = String.init(data: DataResponse.data!, encoding: .utf8)
                        let arr = ResponseStr?.components(separatedBy: "<")
                        let finStr = arr?[0]
                        
                        if let FinalData = finStr?.data(using: .utf8) {
                            if let JsonDict:[String:AnyObject] = try? JSONSerialization.jsonObject(with: FinalData, options: .allowFragments) as! [String:AnyObject] {
                                print("The output when unneccessary characters included in response : ",JsonDict)
                            }
                            else {
                                
                            }
                        }
                        else {
                            
                        }
                    }
                }
                
                completion([:],false)
                break
            }
        }
    }
    
    //MARK:- HTTP GET
    func HTTP_GET_WebServiceMethod(suffix : String , parameterDict : [String:String],completion:@escaping (_ Data:Any,_ IsSuccess:Bool) -> ())
    {
        
        //Part 1
        var parameters = ""
        for (key,value) in parameterDict {
            parameters.append(key + "=" + value + "&")
        }
        parameters.remove(at: parameters.index(parameters.endIndex, offsetBy: -1))
        
        
        //Part 2
        let theUrlString = UrlStruct.test + "/" + suffix + "?" + parameters
        let theURL = URL(string: theUrlString)
        
        //Part 3
        var mutableR = URLRequest.init(url: theURL!)
        
        //Part 4
        if !(Alamofire.NetworkReachabilityManager()?.isReachable)! {
            completion([:],false)
            return
        }
        
        mutableR.timeoutInterval = 35
        mutableR.allowsCellularAccess = true
        
        Alamofire.request(mutableR).responseJSON { (DataResponse) in
            
            switch DataResponse.result{
            case .success(let value):
                completion(value,true)
                break
            case .failure(let error):
                print("Error From AlamoFire - webServiceMethod - WebServiceClass :",error.localizedDescription)
                completion([:],false)
                break
            }
        }
        
    }
    
    //MARK:- HTTP POST
    func HTTP_POST_WebServiceMethod(suffix : String , parameterDict : [String:String],completion:@escaping (_ Data:Any,_ IsSuccess:Bool) -> ())
    {
        
        //Part 1
        var parameters = ""
        for (key,value) in parameterDict {
            parameters.append(key + "=" + value + "&")
        }
        parameters.remove(at: parameters.index(parameters.endIndex, offsetBy: -1))
        let soapLenth = String(parameters.count)
        
        
        //Part 2
        let theUrlString = UrlStruct.test + "/" + suffix
        let theURL = URL(string: theUrlString)
        
        //Part 3
        var mutableR = URLRequest.init(url: theURL!)
        mutableR.httpMethod = "POST"
        mutableR.allHTTPHeaderFields = ["Content-Type":"application/x-www-form-urlencoded","Content-Length":soapLenth]
        mutableR.httpBody = parameters.data(using: String.Encoding.utf8)
        
        
        //Part 4
        if !(Alamofire.NetworkReachabilityManager()?.isReachable)! {
            completion([:],false)
            return
        }
        
        mutableR.timeoutInterval = 35
        mutableR.allowsCellularAccess = true
        
        Alamofire.request(mutableR).responseJSON { (DataResponse) in
            
            switch DataResponse.result{
            case .success(let value):
                completion(value,true)
                break
            case .failure(let error):
                print("Error From AlamoFire - webServiceMethod - WebServiceClass :",error.localizedDescription)
                completion([:],false)
                break
            }
        }
    }
    
    //This method doesnt require - App Transport Security policy
    //MARK:- Json Input
    func jsonInputWebServiceMethod(suffix : String , parameterDict : [String:String],completion:@escaping (_ Data:Any,_ IsSuccess:Bool) -> ())
    {
        
        //Part 1
        let theUrlString = UrlStruct.DriveBookingBase + "/" + suffix
        let theURL = URL(string: theUrlString)
        
        //Part 2
        var mutableR = URLRequest.init(url: theURL!)
        mutableR.httpMethod = "POST"
        mutableR.allHTTPHeaderFields = ["Content-Type":"application/json"]
        
        
        
        //Part 3
        let ParamsData = try? JSONSerialization.data(withJSONObject: parameterDict, options: .prettyPrinted)
        
        if (ParamsData != nil) {
            mutableR.httpBody = ParamsData!
        }
        else {
            completion([:],false)
            return
        }
        
        
        //Part 4
        if !(Alamofire.NetworkReachabilityManager()?.isReachable)! {
            completion([:],false)
            return
        }
        
        mutableR.timeoutInterval = 35
        mutableR.allowsCellularAccess = true
        
        Alamofire.request(mutableR).responseJSON { (DataResponse) in
            
            switch DataResponse.result{
            case .success(let value):
                completion(value,true)
                break
            case .failure(let error):
                print("Error From AlamoFire - webServiceMethod - WebServiceClass :",error.localizedDescription)
                completion([:],false)
                break
            }
        }
    }
}
struct UrlStruct
{
    static let DriveBookingBase = "booking url"
    static let test = "driveFMC url"
}
//
//  ViewController.swift
//  WebServiceHandler1
//
//  Created by SunTelematics on 28/06/18.
//  Copyright Â© 2018 SunTelematics. All rights reserved.
//

import UIKit
import Alamofire

class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()

    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()

    }


 
    
    
    //MARK:- SOAP 1.1
    @IBAction func soap1_1BtnTapped(_ sender: UIButton) {
        if (Alamofire.NetworkReachabilityManager()?.isReachable)! {
            
            let requestDict = ["CancelType":"1","RequestId" : "100","DateTime": "2018-june","EmpCode":"hp1030"]
            
            WebServiceClass().SOAP1_1WebServiceMethod(suffix: "CancelRequest", parameterDict: requestDict) { (FullResponse, ResponseStatus) in
                
                if ResponseStatus {
                    
                    let fullResponseDict = FullResponse as! [String:AnyObject]
                    print("fullResponse =",fullResponseDict)
                    
                    if let data = fullResponseDict["data"] as! [[String:AnyObject]]? {
                        print("data = ",data)
                    }
                        
                    else {
                        print("ResponseDict not assigned to Dict - failure")
                    }
                }
                else {
                    print("ResponseStatus is false")
                }
                
            }
        }
        else {
            print("Net Error")
        }
    }
    
    //MARK : - SOAP 1.2
    @IBAction func soap1_2BtnTapped(_ sender: UIButton) {
        if (Alamofire.NetworkReachabilityManager()?.isReachable)! {
            
            let requestDict = ["CancelType":"1","RequestId" : "100","DateTime": "2018-june","EmpCode":"hp1030"]
            
            WebServiceClass().SOAP1_2WebServiceMethod(suffix: "CancelRequest", parameterDict: requestDict) { (FullResponse, ResponseStatus) in
                
                if ResponseStatus {
                    
                    let fullResponseDict = FullResponse as! [String:AnyObject]
                    print("fullResponse =",fullResponseDict)
                    
                    if let data = fullResponseDict["data"] as! [[String:AnyObject]]? {
                        print("data = ",data)
                    }
                        
                    else {
                        print("ResponseDict not assigned to Dict - failure")
                    }
                }
                else {
                    print("ResponseStatus is false")
                }
                
            }
        }
        else {
            print("Net Error")
        }
    }
    
   
   
    //MARK: - HTTP GET
    @IBAction func HTTP_GET_BtnTapped(_ sender: UIButton) {
        if (Alamofire.NetworkReachabilityManager()?.isReachable)! {
            
            let requestDict = ["CancelType":"1","RequestId" :"100","DateTime": "2018-june","EmpCode":"hp1030"]
            
            WebServiceClass().HTTP_GET_WebServiceMethod(suffix: "CancelRequest", parameterDict: requestDict) { (FullResponse, ResponseStatus) in
                
                if ResponseStatus {
                    
                    let fullResponseDict = FullResponse as! [String:AnyObject]
                    print("fullResponse =",fullResponseDict)
                    
                    if let data = fullResponseDict["data"] as! [[String:AnyObject]]? {
                        print("data = ",data)
                    }
                        
                    else {
                        print("ResponseDict not assigned to Dict - failure")
                    }
                }
                else {
                    print("ResponseStatus is false")
                }
                
            }
        }
        else {
            print("Net Error")
        }
    }
    //MARK: - HTTP POST
    @IBAction func HTTP_POST_BtnTapped(_ sender: UIButton) {
        if (Alamofire.NetworkReachabilityManager()?.isReachable)! {
            
            let requestDict = ["CancelType":"1","RequestId" :"100","DateTime": "2018-june","EmpCode":"hp1030"]
            
            WebServiceClass().HTTP_POST_WebServiceMethod(suffix: "CancelRequest", parameterDict: requestDict) { (FullResponse, ResponseStatus) in
                
                if ResponseStatus {
                    
                    let fullResponseDict = FullResponse as! [String:AnyObject]
                    print("fullResponse =",fullResponseDict)
                    
                    if let data = fullResponseDict["data"] as! [[String:AnyObject]]? {
                        print("data = ",data)
                    }
                        
                    else {
                        print("ResponseDict not assigned to Dict - failure")
                    }
                }
                else {
                    print("ResponseStatus is false")
                }
                
            }
        }
        else {
            print("Net Error")
        }
    }
    //MARK: - Json Input
    @IBAction func JsonInputBtnTapped(_ sender: UIButton) {
        if (Alamofire.NetworkReachabilityManager()?.isReachable)! {
            
            let RequestDict = ["MobileNo":"7896543211","EmpId":"214672","VendorId":"1287","CorporateId":"10811","AppCustomerType":"2"]
            
            WebServiceClass().jsonInputWebServiceMethod(suffix: "BookingsHistory", parameterDict: RequestDict) { (FullResponse, ResponseStatus) in
                
                
                if ResponseStatus {
                    
                    let fullResponseDict = FullResponse as! [String:AnyObject]
                    print("fullResponse =",fullResponseDict)
                    
                    if let Table = fullResponseDict["Table"] as! [[String:AnyObject]]? {
                        print("Table = ",Table)
                    }
                        
                    else {
                        print("ResponseDict not assigned to Dict - failure")
                    }
                }
                else {
                    print("ResponseStatus is false")
                }
            }
            
        }
        else {
            print("No Internet")
        }
        
    }
}


